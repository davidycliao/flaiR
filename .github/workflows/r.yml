# name: R-CMD-check
#
# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop
#
# jobs:
#
#   R-CMD-check:
#     runs-on: ${{ matrix.config.os }}
#
#     name: ${{ matrix.config.os }} (${{ matrix.config.r }})
#
#     strategy:
#       fail-fast: false
#       matrix:
#         config:
#           - {os: macos-latest,   r: 'release'}
#           - {os: windows-latest, r: 'release'}
#
#     env:
#       GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
#       R_KEEP_PKG_SOURCE: yes
#
#     steps:
#       - uses: actions/checkout@v2
#
#       - uses: r-lib/actions/setup-pandoc@v2
#
#       - name: Setup Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.9'  # Ensure Python 3.x is being used
#
#       - name: Check Python Version
#         run: |
#           python --version
#
#       - name: Install Python dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install flair
#
#       - name: Setup Python (Only on ubuntu-latest)
#         if: matrix.config.os == 'ubuntu-latest'
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.10.13'
#
#       - name: Install Python venv and dependencies (Only on ubuntu-latest)
#         if: matrix.config.os == 'ubuntu-latest'
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y python3-venv
#           python -m venv ~/.venv
#           echo "RETICULATE_PYTHON=~/.venv/bin/python" >> $GITHUB_ENV
#           source ~/.venv/bin/activate
#
#       - uses: r-lib/actions/setup-r@v2
#         with:
#           r-version: ${{ matrix.config.r }}
#           http-user-agent: ${{ matrix.config.http-user-agent }}
#           use-public-rspm: true
#
#       - name: Install reticulate (Only on ubuntu-latest)
#         if: matrix.config.os == 'ubuntu-latest'
#         run: |
#           Rscript -e "install.packages('reticulate', repos = 'https://cloud.r-project.org/')"
#
#       - name: Install Pandoc (Only on Windows)
#         if: matrix.config.os == 'windows-latest'
#         run: |
#           choco install pandoc
#
#       - name: Install Python dependencies (Only on Windows)
#         if: matrix.config.os == 'windows-latest'
#         run: |
#           python -m pip install --upgrade pip
#           pip install scipy==1.12.0  # test
#           pip install flair
#
#       - name: Install Python dependencies (Only on macOS)
#         if: matrix.config.os == 'macos-latest'
#         run: |
#           python -m pip install --upgrade pip
#           pip install scipy==1.12.0  # test
#           pip install flair
#
#       - uses: r-lib/actions/setup-r-dependencies@v2
#         with:
#           extra-packages: rcmdcheck
#
#
# name: R-CMD-check
# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop
# jobs:
#   R-CMD-check:
#     runs-on: ${{ matrix.config.os }}
#     name: ${{ matrix.config.os }} (${{ matrix.config.r }})
#     strategy:
#       fail-fast: false
#       matrix:
#         config:
#           - {os: macos-latest,   r: 'release'}
#           - {os: windows-latest, r: 'release'}
#     env:
#       GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
#       R_KEEP_PKG_SOURCE: yes
#     steps:
#       - uses: actions/checkout@v2
#       - uses: r-lib/actions/setup-pandoc@v2
#
#       # Install system dependencies for macOS BEFORE Python setup
#       - name: Install system dependencies (macOS)
#         if: matrix.config.os == 'macos-latest'
#         run: |
#           brew install armadillo pkg-config
#           # Set environment variables for compilation
#           echo "PKG_CPPFLAGS=-I/opt/homebrew/include" >> $GITHUB_ENV
#           echo "PKG_LIBS=-L/opt/homebrew/lib -larmadillo" >> $GITHUB_ENV
#           echo "CPPFLAGS=-I/opt/homebrew/include" >> $GITHUB_ENV
#           echo "LDFLAGS=-L/opt/homebrew/lib" >> $GITHUB_ENV
#
#       - name: Setup Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.9'  # Ensure Python 3.x is being used
#       - name: Check Python Version
#         run: |
#           python --version
#       - name: Install Python dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install flair
#       - name: Setup Python (Only on ubuntu-latest)
#         if: matrix.config.os == 'ubuntu-latest'
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.10.13'
#       - name: Install Python venv and dependencies (Only on ubuntu-latest)
#         if: matrix.config.os == 'ubuntu-latest'
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y python3-venv
#           python -m venv ~/.venv
#           echo "RETICULATE_PYTHON=~/.venv/bin/python" >> $GITHUB_ENV
#           source ~/.venv/bin/activate
#       - uses: r-lib/actions/setup-r@v2
#         with:
#           r-version: ${{ matrix.config.r }}
#           http-user-agent: ${{ matrix.config.http-user-agent }}
#           use-public-rspm: true
#       - name: Install reticulate (Only on ubuntu-latest)
#         if: matrix.config.os == 'ubuntu-latest'
#         run: |
#           Rscript -e "install.packages('reticulate', repos = 'https://cloud.r-project.org/')"
#       - name: Install Pandoc (Only on Windows)
#         if: matrix.config.os == 'windows-latest'
#         run: |
#           choco install pandoc
#       - name: Install Python dependencies (Only on Windows)
#         if: matrix.config.os == 'windows-latest'
#         run: |
#           python -m pip install --upgrade pip
#           pip install scipy==1.12.0  # test
#           pip install flair
#       - name: Install Python dependencies (Only on macOS)
#         if: matrix.config.os == 'macos-latest'
#         run: |
#           python -m pip install --upgrade pip
#           pip install scipy==1.12.0  # test
#           pip install flair
#       - uses: r-lib/actions/setup-r-dependencies@v2
#         with:
#           extra-packages: rcmdcheck
#       - uses: r-lib/actions/check-r-package@v2

name: R-CMD-check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macos-latest, r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-latest, r: 'release'}  # 添加 ubuntu 支援

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      _R_CHECK_FORCE_SUGGESTS_: false
      _R_CHECK_CRAN_INCOMING_: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      # === macOS 特定設定 ===
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # 安裝 Armadillo 和相關依賴
          brew install armadillo pkg-config openblas lapack

          # 設置編譯環境變數
          echo "PKG_CPPFLAGS=-I/opt/homebrew/include" >> $GITHUB_ENV
          echo "PKG_LIBS=-L/opt/homebrew/lib -larmadillo -lopenblas -llapack" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/opt/homebrew/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L/opt/homebrew/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig" >> $GITHUB_ENV

          # 確保 Armadillo 可被找到
          echo "ARMA_INCLUDE_DIR=/opt/homebrew/include" >> $GITHUB_ENV
          echo "ARMA_LIB_DIR=/opt/homebrew/lib" >> $GITHUB_ENV

      # === Ubuntu 特定設定 ===
      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libarmadillo-dev \
            libopenblas-dev \
            liblapack-dev \
            pkg-config \
            python3-venv \
            python3-dev

      # === Windows 特定設定 ===
      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # 安裝 Pandoc
          choco install pandoc

      # === 統一的 Python 設定 ===
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Configure Python environment
        run: |
          python --version
          python -m pip install --upgrade pip setuptools wheel
        shell: bash

      # === 平台特定的 Python 虛擬環境設定 ===
      - name: Setup Python virtual environment (Unix)
        if: runner.os != 'Windows'
        run: |
          python -m venv ~/.venv
          source ~/.venv/bin/python
          echo "RETICULATE_PYTHON=$HOME/.venv/bin/python" >> $GITHUB_ENV
          echo "$HOME/.venv/bin" >> $GITHUB_PATH
        shell: bash

      - name: Setup Python virtual environment (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m venv $env:USERPROFILE\.venv
          echo "RETICULATE_PYTHON=$env:USERPROFILE\.venv\Scripts\python.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$env:USERPROFILE\.venv\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        shell: powershell

      # === 安裝 Python 依賴 ===
      - name: Install Python dependencies (Unix)
        if: runner.os != 'Windows'
        run: |
          source ~/.venv/bin/activate
          pip install --upgrade pip
          pip install scipy==1.12.0 torch flair
        shell: bash

      - name: Install Python dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          & "$env:USERPROFILE\.venv\Scripts\Activate.ps1"
          pip install --upgrade pip
          pip install scipy==1.12.0 torch flair
        shell: powershell

      # === R 設定 ===
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      # === 安裝 R 依賴 ===
      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            any::rcmdcheck
            any::reticulate
          needs: check

      # === 配置 reticulate ===
      - name: Configure reticulate
        run: |
          library(reticulate)

          # 根據平台設置 Python 路徑
          if (.Platform$OS.type == "windows") {
            python_path <- file.path(Sys.getenv("USERPROFILE"), ".venv", "Scripts", "python.exe")
          } else {
            python_path <- file.path(path.expand("~"), ".venv", "bin", "python")
          }

          # 確保 Python 路徑存在
          if (file.exists(python_path)) {
            use_python(python_path, required = TRUE)
            cat("Using Python:", python_path, "\n")

            # 測試 Python 模組
            tryCatch({
              py_config()
              flair <- import("flair")
              cat("Successfully imported flair module\n")
            }, error = function(e) {
              cat("Error importing flair:", conditionMessage(e), "\n")
              stop("Failed to import required Python modules")
            })
          } else {
            stop("Python executable not found at:", python_path)
          }
        shell: Rscript {0}

      # === 執行 R CMD check ===
      - name: Check R package
        uses: r-lib/actions/check-r-package@v2
        with:
          build_args: 'c("--no-manual", "--compact-vignettes=gs+qpdf")'
          args: 'c("--no-manual", "--as-cran")'  # 先嘗試完整檢查
        continue-on-error: true  # 允許失敗，以便查看詳細日誌

      # === 故障排除：如果失敗則嘗試基本檢查 ===
      - name: Fallback check (skip vignettes)
        if: failure()
        uses: r-lib/actions/check-r-package@v2
        with:
          build_args: 'c("--no-manual")'
          args: 'c("--no-manual", "--as-cran", "--no-vignettes", "--no-build-vignettes")'

      # === 上傳檢查結果 ===
      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check/

)
}, error = function(e) {
list(exists = FALSE, path = NULL, version = NULL)
})
venv_info <- tryCatch({
venvs <- virtualenv_list()
if (length(venvs) > 0) {
list(
exists = TRUE,
envs = venvs,
current = Sys.getenv("VIRTUAL_ENV")
)
} else {
list(exists = FALSE, envs = NULL, current = NULL)
}
}, error = function(e) {
list(exists = FALSE, envs = NULL, current = NULL)
})
list(python = python_info, virtualenv = venv_info)
}
#' Initialize required modules
#' @noRd
initialize_modules <- function() {
tryCatch({
# Import modules
torch <- import("torch", delay_load = TRUE)
transformers <- import("transformers", delay_load = TRUE)
flair <- import("flair", delay_load = TRUE)
# flair_embeddings <- import("flair.embeddings", delay_load = TRUE)
# Get versions
torch_version <- py_get_attr(torch, "__version__")
transformers_version <- py_get_attr(transformers, "__version__")
flair_version <- py_get_attr(flair, "__version__")
# Check GPU capabilities
cuda_info <- list(
available = torch$cuda$is_available(),
device_name = if (torch$cuda$is_available()) {
tryCatch({
props <- torch$cuda$get_device_properties(0)
props$name
}, error = function(e) NULL)
} else NULL,
version = tryCatch(torch$version$cuda, error = function(e) NULL)
)
mps_available <- if(Sys.info()["sysname"] == "Darwin") {
torch$backends$mps$is_available()
} else FALSE
# Store modules
.pkgenv$modules$flair <- flair
.pkgenv$modules$flair_embeddings <- flair_embeddings
.pkgenv$modules$torch <- torch
list(
versions = list(
torch = torch_version,
transformers = transformers_version,
flair = flair_version
),
device = list(
cuda = cuda_info,
mps = mps_available
),
status = TRUE
)
}, error = function(e) {
list(status = FALSE, error = e$message)
})
}
#' Check and select Python environment
#' @noRd
select_python_env <- function() {
# 檢查系統 Python
system_py <- tryCatch({
config <- py_config()
list(
exists = TRUE,
path = config$python,
version = config$version,
type = "system"
)
}, error = function(e) {
list(exists = FALSE, path = NULL, version = NULL, type = NULL)
})
# 檢查現有的虛擬環境
venv_info <- tryCatch({
venvs <- virtualenv_list()
current_venv <- Sys.getenv("VIRTUAL_ENV")
if (length(venvs) > 0 && current_venv != "") {
list(
exists = TRUE,
path = current_venv,
envs = venvs,
type = "virtualenv"
)
} else {
list(exists = FALSE, path = NULL, envs = NULL, type = NULL)
}
}, error = function(e) {
list(exists = FALSE, path = NULL, envs = NULL, type = NULL)
})
# 返回環境信息
list(
system = system_py,
virtualenv = venv_info
)
}
#' @noRd
.onLoad <- function(libname, pkgname) {
if (Sys.info()["sysname"] == "Darwin" &&
Sys.info()["machine"] == "arm64") {
Sys.setenv(PYTORCH_ENABLE_MPS_FALLBACK = 1)
}
Sys.setenv(KMP_DUPLICATE_LIB_OK = "TRUE")
options(reticulate.prompt = FALSE)
}
#' @noRd
.onAttach <- function(libname, pkgname) {
# Get system and environment information
sys_info <- get_system_info()
env_info <- check_python_env()
# Print environment information
message("\nEnvironment Information:")
message(sprintf("OS: %s (%s)", sys_info$name, sys_info$version))
if (env_info$python$exists) {
message(sprintf("System Python: %s", env_info$python$path))
}
if (env_info$virtualenv$exists) {
message("\nVirtual environments:")
for (env in env_info$virtualenv$envs) {
is_current <- !is.null(env_info$virtualenv$current) &&
env_info$virtualenv$current == env
marker <- if (is_current) "*" else " "
message(sprintf("%s %s", marker, env))
}
}
message("")
# Initialize Python environment
tryCatch({
# Set up virtual environment
venv <- file.path(path.expand("~"), "flair_env")
if (!virtualenv_exists(venv)) {
suppressWarnings(virtualenv_create(venv))
}
suppressWarnings(use_virtualenv(venv, required = TRUE))
# Check Python version
config <- py_config()
version_parts <- strsplit(as.character(config$version), "\\.")[[1]]
python_version <- paste(version_parts[1], version_parts[2], sep = ".")
python_status <- as.numeric(version_parts[1]) == 3 &&
as.numeric(version_parts[2]) >= 9 &&
as.numeric(version_parts[2]) <= 12
print_status("Python", python_version, python_status)
if (python_status) {
init_result <- initialize_modules()
if (!init_result$status) {
# Install required packages
suppressWarnings({
py_install(
packages = c(
paste0("torch==", .pkgenv$package_constants$torch_version),
paste0("numpy==", .pkgenv$package_constants$numpy_version),
paste0("scipy==", .pkgenv$package_constants$scipy_version),
paste0("transformers==",
.pkgenv$package_constants$transformers_version),
paste0("flair>=", .pkgenv$package_constants$flair_min_version)
),
pip = TRUE,
method = "auto"
)
})
init_result <- initialize_modules()
}
if (init_result$status) {
# Print component status
print_status("PyTorch", init_result$versions$torch, TRUE)
print_status("Transformers", init_result$versions$transformers, TRUE)
print_status("Flair NLP", init_result$versions$flair, TRUE)
# Print GPU status
cuda_info <- init_result$device$cuda
if (cuda_info$available || init_result$device$mps) {
print_status("GPU", "available", TRUE)
if (cuda_info$available) {
gpu_type <- if (!is.null(cuda_info$device_name)) {
sprintf("CUDA (%s)", cuda_info$device_name)
} else {
"CUDA"
}
print_status(gpu_type, cuda_info$version, TRUE)
}
if (init_result$device$mps) {
print_status("Mac MPS", "available", TRUE)
}
} else {
print_status("GPU", "not available", FALSE)
}
# Print welcome message
msg <- sprintf(
"%s%sflaiR%s%s: %s%sAn R Wrapper for Accessing Flair NLP %s%s%s",
.pkgenv$colors$bold, .pkgenv$colors$blue,
.pkgenv$colors$reset, .pkgenv$colors$reset_bold,
.pkgenv$colors$bold, .pkgenv$colors$yellow,
init_result$versions$flair,
.pkgenv$colors$reset, .pkgenv$colors$reset_bold
)
message(msg)
}
}
}, error = function(e) {
message("Error during initialization: ", e$message)
})
invisible(NULL)
}
.onAttach()
Sys.unsetenv("RETICULATE_PYTHON")
roxygen2::roxygenise()
roxygen2::roxygenise()
install_flair()
roxygen2::roxygenise()
get_system_info
# Get system and environment information
sys_info <- get_system_info()
sys_info
env_info <- check_python_env()
env_info
reticulate::py_config()
python_path <- "/usr/local/bin/python3.10"
python_home <- "/Library/Frameworks/Python.framework/Versions/3.10"
libpython_path <- "/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/config-3.10-darwin/libpython3.10.dylib"
Sys.setenv(RETICULATE_PYTHON = python_path)
Sys.setenv(PYTHONHOME = python_home)
options(reticulate.python = python_path)
roxygen2::roxygenise()
roxygen2::roxygenise()
reticulate::use_virtualenv("~/flair_env", required = TRUE)
reticulate::use_python("/Users/yenchiehliao/flair_env/bin/python", required = TRUE)
> reticulate::use_python("/Users/yenchiehliao/flair_env/bin/python", required = TRUE)
# 清理環境變量
Sys.unsetenv("RETICULATE_PYTHON")
# 清理 R 選項
options(reticulate.python = NULL)
roxygen2::roxygenise()
roxygen2::roxygenise()
# 清理環境變量
Sys.unsetenv("RETICULATE_PYTHON")
# 清理 R 選項
options(reticulate.python = NULL)
# 確保這是第一個 Python 相關的操作
reticulate::use_python("/Users/yenchiehliao/flair_env/bin/python", required = TRUE)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
install_flair()
roxygen2::roxygenise()
#' Install Flair NLP in Python environment
#'
#' @param force Logical, whether to force reinstall packages. Default is FALSE.
#' @param python_version Character, specify Python version to install. Default is "3.10".
#' @param flair_version Character, specify Flair version to install. Default is "0.11.3".
#' @param pip_options Character, additional pip install options. Default is NULL.
#'
#' @return Invisible NULL, called for side effects
#' @export
install_flair <- function(force = FALSE,
python_version = "3.10",
flair_version = "0.11.3",  # Changed default to fixed version
pip_options = NULL) {
print_status <- function(component, status, extra_info = NULL) {
symbol <- if(status) "\u2713" else "\u2717"
color <- if(status) "\033[32m" else "\033[31m"
message <- sprintf("%s%s\033[39m %s", color, symbol, component)
if (!is.null(extra_info)) {
message <- paste0(message, ": ", extra_info)
}
message(message)
}
# Initial cleanup
Sys.unsetenv("RETICULATE_PYTHON")
options(reticulate.python = NULL)
# Make sure reticulate is available
if (!requireNamespace("reticulate", quietly = TRUE)) {
install.packages("reticulate")
}
tryCatch({
# Setup Python environment
message("\nPython Configuration:")
# Get Python path
python_path <- if (Sys.info()["sysname"] == "Windows") {
normalizePath(file.path(Sys.getenv("LOCALAPPDATA"), "Programs", "Python", python_version, "python.exe"))
} else {
"/usr/local/bin/python3.10"
}
# Use system Python
if (file.exists(python_path)) {
Sys.setenv(RETICULATE_PYTHON = python_path)
reticulate::use_python(python_path, required = TRUE)
print_status("Python", TRUE, python_path)
} else {
stop("Python not found at ", python_path)
}
# Print version info
print_status("Version", TRUE, paste("Using Flair version:", flair_version))
# Install packages
print_status("Installation", TRUE, "Installing required packages...")
# Install core packages
reticulate::py_install(c("pip", "setuptools", "wheel"), pip = TRUE)
# Install PyTorch and dependencies
packages <- c(
"numpy==1.26.4",
"scipy==1.12.0",
"torch>=2.0.0",
"transformers>=4.30.0",
sprintf("flair==%s", flair_version)
)
for (pkg in packages) {
print_status("Package", TRUE, paste("Installing", pkg))
tryCatch({
reticulate::py_install(pkg, pip = TRUE)
}, error = function(e) {
print_status("Package", FALSE, paste("Failed to install", pkg))
stop(e$message)
})
}
# Verify installation
flair_check <- try({
flair <- reticulate::import("flair")
version <- reticulate::py_get_attr(flair, "__version__")
list(status = TRUE, version = version)
}, silent = TRUE)
if (!inherits(flair_check, "try-error") && flair_check$status) {
print_status(
"Flair NLP",
TRUE,
paste("Successfully installed version", flair_check$version)
)
message("\nIMPORTANT: Please restart R session to use the newly installed environment")
} else {
print_status("Flair NLP", FALSE, "Installation failed")
message("\nTroubleshooting steps:")
message("1. Try running install_flair(force = TRUE)")
message("2. Check your Python installation")
message("3. Check your internet connection")
}
}, error = function(e) {
print_status("Installation", FALSE, paste("Error:", e$message))
message("\nTroubleshooting steps:")
message("1. Check if Python ", python_version, " is installed")
message("2. Try installing Python manually")
message("3. Make sure you have internet access")
})
invisible(NULL)
}
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
install_flair()
roxygen2::roxygenise()
install_flair()
install_flair()
roxygen2::roxygenise()
install_flair()
roxygen2::roxygenise()
library(flaiR)
remotes::install_github("davidycliao/flaiR@develop", force = TRUE)
remotes::install_github("davidycliao/flaiR@develop", force = TRUE)
library(flaiR)
# TransformerDocumentEmbeddings is a class for loading transformer
TransformerDocumentEmbeddings <- flair_embeddings()$TransformerDocumentEmbeddings
document_embeddings <- TransformerDocumentEmbeddings('distilbert-base-uncased', fine_tune=TRUE)
document_embeddings
remotes::install_github("davidycliao/flaiR", force = TRUE)
remotes::install_github("davidycliao/flaiR", force = TRUE)
install.packages("remotes")
remotes::install_github("davidycliao/flaiR", force = TRUE)
remotes::install_github("davidycliao/flaiR", force = TRUE)
remotes::install_github("davidycliao/flaiR", force = TRUE)
library(package)
library(flaiR)
remotes::install_github("davidycliao/flaiR", force = TRUE)
remotes::install_github("davidycliao/flaiR@develop", force = TRUE)
remotes::install_github("davidycliao/flaiR@develop", force = TRUE)
library(flaiR)
library(flaiR)
roxygen2::roxygenise()
reticulate::py_install('tokenizers>=0.14,<0.19', pip = TRUE)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages("roxygen2")
install.packages("roxygen2")
renv::status()
renv::restore(confirm = FALSE)
install.packages("roxygence2")
install.packages("roxygen2")
library(renv)
init()
library(roxygen2)
snapshot()
library(renv)
snapshot()
install("roxygen2")
snapshot()
install("pkgdown")
snapshot()
snapshot("dplyr")
install("dplyr")
renv::install("prodriguezsosa/conText")
roxygenise()
renv::status()
library(renv)
restore()
library(pkgdown)
install.packages("pkgdown")
library(pkgdown)
remotes::install_github("tidyverse/tidytemplate", force = TRUE)
install.packages("remotes")
update()
snapshot()
remotes::install_github("tidyverse/tidytemplate", force = TRUE)
# 安裝 usethis (如果還沒有)
install.packages("usethis")
# 創建 PAT
usethis::create_github_token()
# 編輯 .Renviron 文件
usethis::edit_r_environ()
# 添加這一行（替換成你的 token）：
GITHUB_PAT="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"
library(renv)
remotes::install_github("tidyverse/tidytemplate", force = TRUE)
library(pkgdown)
build_site()
install.packages('lsa')
snapshot()
build_site()
install"ggplot2"
install.packages('ggplot2')
snapshot()
update()
build_site()
install.packages('plotly')
snapshot()
build_site()
install.packages(ggpubr)
install.packages("ggpubr")
install.packages("ggpubr")
lib
library(renv)
restore()
library(pkgdown)
install("pkgdown")
update()
remotes::install_github("tidyverse/tidytemplate", force = TRUE)
snapshot()
install.packages("remotes")
remotes::install_github("tidyverse/tidytemplate", force = TRUE)
remotes::install_github("prodriguezsosa/conText", force = TRUE)
library(pkgdown)
build_site()
install("lsa")
snapshot()
update
update()
install("ggplot")
install("ggplot2")
install("purrr")
install("plotly")
install("ggpubr")
i
install("remotes")
install("dplyr")
snapshot()
update()
install("devtools")
install("text2vec")
install("RcppArmadillo")
update()
snapshot()
build_site()
install("rsparse")
snapshop()
snapshot()
build_site()
install("rsparse")
install("gfortran")
xcode-select --install
install.packages("rsparse", type = "binary")
# Install key dependencies
install.packages(c("Rcpp", "RcppArmadillo", "Matrix", "data.table", "float", "lgr"))
# Then try rsparse again
install.packages("rsparse", type = "source")
install.packages("rsparse", type = "source")
